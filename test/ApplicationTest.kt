package cc.hibay

import com.theoxao.antlr.EnumWalker
import com.theoxao.antlr.KeyWalker
import com.theoxao.antlr.TableWalker
import com.theoxao.antlr.preParse
import com.theoxao.main
import io.ktor.http.HttpMethod
import io.ktor.http.HttpStatusCode
import io.ktor.server.testing.handleRequest
import io.ktor.server.testing.withTestApplication
import io.ktor.util.KtorExperimentalAPI
import org.intellij.lang.annotations.Language
import org.joda.time.DateTime
import java.io.File
import java.io.FileInputStream
import java.nio.charset.Charset
import kotlin.test.Test
import kotlin.test.assertEquals

@KtorExperimentalAPI
class ApplicationTest {

    @Test
    fun testEnum() {
        val enum = preParse(raw, { EnumWalker("122") }, EnumWalker::emit)
        println("halt")
    }

    @Test
    fun testTable() {
        val table = preParse(tableRaw, { TableWalker("123", "123") }, TableWalker::emit)
        println("halt")
    }

    @Language("JAVA")
    val tableRaw =
        "public class TableExample extends TableImpl<TableExampleRecord> {\n\n    /**\n     * The reference instance of <code>joop.table_example</code>\n     */\n    public static final TableExample TABLE_EXAMPLE = new TableExample();\n    private static final long serialVersionUID = -2027771328;\n    /**\n     * The column <code>joop.table_example.first_key</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FIRST_KEY = createField(\"first_key\", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, \"\");\n    /**\n     * The column <code>joop.table_example.type_varchar</code>.\n     */\n    public final TableField<TableExampleRecord, String> TYPE_VARCHAR = createField(\"type_varchar\", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, \"\");\n    /**\n     * The column <code>joop.table_example.type_big_int</code>.\n     */\n    public final TableField<TableExampleRecord, Long> TYPE_BIG_INT = createField(\"type_big_int\", org.jooq.impl.SQLDataType.BIGINT, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_char</code>.\n     */\n    public final TableField<TableExampleRecord, String> TYPE_CHAR = createField(\"type_char\", org.jooq.impl.SQLDataType.CHAR.length(20), this, \"\");\n    /**\n     * The column <code>joop.table_example.type_date</code>.\n     */\n    public final TableField<TableExampleRecord, Date> TYPE_DATE = createField(\"type_date\", org.jooq.impl.SQLDataType.DATE, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_datetime</code>.\n     */\n    public final TableField<TableExampleRecord, Timestamp> TYPE_DATETIME = createField(\"type_datetime\", org.jooq.impl.SQLDataType.TIMESTAMP, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_decimal</code>.\n     */\n    public final TableField<TableExampleRecord, BigDecimal> TYPE_DECIMAL = createField(\"type_decimal\", org.jooq.impl.SQLDataType.DECIMAL.precision(5, 5), this, \"\");\n    /**\n     * The column <code>joop.table_example.type_double</code>.\n     */\n    public final TableField<TableExampleRecord, Double> TYPE_DOUBLE = createField(\"type_double\", org.jooq.impl.SQLDataType.DOUBLE, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_enum</code>.\n     */\n    public final TableField<TableExampleRecord, TableExampleTypeEnum> TYPE_ENUM = createField(\"type_enum\", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.thigh.db.dto.joop.enums.TableExampleTypeEnum.class), this, \"\");\n    /**\n     * The column <code>joop.table_example.type_int</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> TYPE_INT = createField(\"type_int\", org.jooq.impl.SQLDataType.INTEGER, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_text</code>.\n     */\n    public final TableField<TableExampleRecord, String> TYPE_TEXT = createField(\"type_text\", org.jooq.impl.SQLDataType.CLOB, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_timestamp</code>.\n     */\n    public final TableField<TableExampleRecord, Timestamp> TYPE_TIMESTAMP = createField(\"type_timestamp\", org.jooq.impl.SQLDataType.TIMESTAMP, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_tiny_int</code>.\n     */\n    public final TableField<TableExampleRecord, Byte> TYPE_TINY_INT = createField(\"type_tiny_int\", org.jooq.impl.SQLDataType.TINYINT, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_tiny_int_2</code>.\n     */\n    public final TableField<TableExampleRecord, Byte> TYPE_TINY_INT_2 = createField(\"type_tiny_int_2\", org.jooq.impl.SQLDataType.TINYINT, this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_not_null</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_NOT_NULL = createField(\"feat_not_null\", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_second_key</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_SECOND_KEY = createField(\"feat_second_key\", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_default_value</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_DEFAULT_VALUE = createField(\"feat_default_value\", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline(\"500\", org.jooq.impl.SQLDataType.INTEGER)), this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_current_timestamp_on_update</code>.\n     */\n    public final TableField<TableExampleRecord, Timestamp> FEAT_CURRENT_TIMESTAMP_ON_UPDATE = createField(\"feat_current_timestamp_on_update\", org.jooq.impl.SQLDataType.TIMESTAMP, this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_reference_key</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_REFERENCE_KEY = createField(\"feat_reference_key\", org.jooq.impl.SQLDataType.INTEGER, this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_unique_index</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_UNIQUE_INDEX = createField(\"feat_unique_index\", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_joint_index_1</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_JOINT_INDEX_1 = createField(\"feat_joint_index_1\", org.jooq.impl.SQLDataType.INTEGER, this, \"\");\n    /**\n     * The column <code>joop.table_example.feat_joint_index_2</code>.\n     */\n    public final TableField<TableExampleRecord, Integer> FEAT_JOINT_INDEX_2 = createField(\"feat_joint_index_2\", org.jooq.impl.SQLDataType.INTEGER, this, \"\");\n    /**\n     * The column <code>joop.table_example.type_enum_2</code>.\n     */\n    public final TableField<TableExampleRecord, TableExampleTypeEnum_2> TYPE_ENUM_2 = createField(\"type_enum_2\", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.thigh.db.dto.joop.enums.TableExampleTypeEnum_2.class), this, \"\");\n\n    /**\n     * Create a <code>joop.table_example</code> table reference\n     */\n    public TableExample() {\n        this(\"table_example\", null);\n    }\n\n    /**\n     * Create an aliased <code>joop.table_example</code> table reference\n     */\n    public TableExample(String alias) {\n        this(alias, TABLE_EXAMPLE);\n    }\n\n    private TableExample(String alias, Table<TableExampleRecord> aliased) {\n        this(alias, aliased, null);\n    }\n\n    private TableExample(String alias, Table<TableExampleRecord> aliased, Field<?>[] parameters) {\n        super(alias, null, aliased, parameters, \"\");\n    }\n\n    /**\n     * The class holding records for this type\n     */\n    @Override\n    public Class<TableExampleRecord> getRecordType() {\n        return TableExampleRecord.class;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Schema getSchema() {\n        return Joop.JOOP;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public UniqueKey<TableExampleRecord> getPrimaryKey() {\n        return Keys.KEY_TABLE_EXAMPLE_PRIMARY;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public List<UniqueKey<TableExampleRecord>> getKeys() {\n        return Arrays.<UniqueKey<TableExampleRecord>>asList(Keys.KEY_TABLE_EXAMPLE_PRIMARY, Keys.KEY_TABLE_EXAMPLE_IX_UNIQUE_INDEX);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public List<ForeignKey<TableExampleRecord, ?>> getReferences() {\n        return Arrays.<ForeignKey<TableExampleRecord, ?>>asList(Keys.FK_REFERENCE_KEY);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public TableExample as(String alias) {\n        return new TableExample(alias, this);\n    }\n\n    /**\n     * Rename this table\n     */\n    public TableExample rename(String name) {\n        return new TableExample(name, null);\n    }\n\n    private static class IndexKeys0 extends AbstractIndex {\n        public static final IndexKey JOOP_TABLE_EXAMPLE_IX_JOINT_INDEX = IndexKey.createIndex(\"table_example\", \"ix_joint_index\", \"feat_joint_index_1\", \"feat_joint_index_2\");\n        public static final IndexKey JOOP_TABLE_EXAMPLE_FK_REFERENCE_KEY = IndexKey.createIndex(\"table_example\", \"fk_reference_key\", \"feat_reference_key\");\n    }\n}\n"

    @Language("JAVA")
    val raw =
        "public enum AuditRecordStage implements EnumType {\n\n    FIRST_MANUAL_REVIEW(\"FIRST_MANUAL_REVIEW\"),\n\n    LAST_MANUAL_REVIEW(\"LAST_MANUAL_REVIEW\"),\n\n    FIRST_SYSTEM_REVIEW(\"FIRST_SYSTEM_REVIEW\"),\n\n    LAST_SYSTEM_REVIEW(\"LAST_SYSTEM_REVIEW\");\n\n    private final String literal;\n\n    private AuditRecordStage(String literal) {\n        this.literal = literal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Schema getSchema() {\n        return null;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getName() {\n        return \"audit_record_stage\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getLiteral() {\n        return literal;\n    }\n}\n"

}
