package cc.hibay

import com.theoxao.antlr.KeyWalker
import com.theoxao.antlr.TableWalker
import com.theoxao.antlr.preParse
import com.theoxao.main
import groovy.lang.GroovyShell
import io.ktor.http.HttpMethod
import io.ktor.http.HttpStatusCode
import io.ktor.server.testing.handleRequest
import io.ktor.server.testing.withTestApplication
import io.ktor.util.KtorExperimentalAPI
import org.intellij.lang.annotations.Language
import org.joda.time.DateTime
import java.io.File
import java.io.FileInputStream
import java.nio.charset.Charset
import kotlin.test.Test
import kotlin.test.assertEquals

@KtorExperimentalAPI
class ApplicationTest {
    @Test
    fun testRoot() {
        withTestApplication({ main() }) {
            handleRequest(HttpMethod.Get, "/").apply {
                assertEquals(HttpStatusCode.OK, response.status())
                assertEquals("HELLO WORLD!", response.content)
            }
        }
    }

    @Test
    fun testInjection() {
        println(DateTime.parse("2020-04-25T12:13:57.000+08:00").toDate())
    }
//
//    @Test
//    fun testGroovyParser() {
//        val raw = FileInputStream(File("/home/theo/workspace/mzf/joop/test/Keys")).readBytes()
//            .toString(Charset.defaultCharset())
//        preParse(raw, {
//            KeyWalker("123")
//        }, {
//
//        })
//    }

    @Test
    fun testGroovyParsingEnumFile() {
        val script = GroovyShell().parse(raw)
        println("halt")
    }


    val raw =
        "/**\n * This class is generated by jOOQ\n */\npackage com.thigh.db.dto.loan.enums;\n\n\nimport javax.annotation.Generated;\n\nimport org.jooq.EnumType;\nimport org.jooq.Schema;\n\n\n/**\n * This class is generated by jOOQ.\n */\n@Generated(\n        value = [\n                \"http://www.jooq.org\",\n                \"jOOQ version:3.8.4\"\n        ],\n        comments = \"This class is generated by jOOQ\"\n)\n@SuppressWarnings([ \"all\", \"unchecked\", \"rawtypes\" ])\npublic enum AppConfigType implements EnumType {\n\n    TEXT(\"TEXT\"),\n\n    RICH_TEXT(\"RICH_TEXT\"),\n\n    LIST(\"LIST\");\n\n    private final String literal;\n\n    private AppConfigType(String literal) {\n        this.literal = literal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Schema getSchema() {\n        return null;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getName() {\n        return \"app_config_type\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getLiteral() {\n        return literal;\n    }\n}\n"
}
